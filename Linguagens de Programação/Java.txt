JDK 8u111 with NetBeans 8.2

confirurar o JAVA_HOME e o Path

criar arquivo de texto (NetBeans) e salvar como "Nome.java"
o nome do programa tem que ser o mesmo nome da classe criada

NetBeans:
	help --> ctrl+space
	se tiver dando problema --> martelo+vasoura(shift+F11)
	para rodar --> F6
	para alterar o tamanho da letra --> Alt+roda do mouse

import java.util.Scanner;
	Scanner scanner = new Scanner(System.in);  
	//Para jogar em um inteiro
	int i = scanner.nextInt();
        //Para uma String  
        String s = scanner.nextLine(); armazena toda a linha, e o next(); armazena ate o espaço
        //Para um double e assim por diante.
        double d = scanner.nextDouble();

Objeto
nome da classe
--------------
atributos          --> caracteristicas
--------------
mÃ©todos            --> oque faz

programa Ã©: objetos comunicando-se entre si

Camel Case:
	variavelQualquer
	ClasseQualquer
	.
	.
	.

case sensitive

boolean --> Boolean
byte --> Byte
short --> Short
int --> Integer 
long --> Long
float --> Float
double --> Double
char --> Character

array--> declaração--> int[] array; array = new int[10]; chamada--> array[5];
para fazer uma array de um objeto --> Conta[] array; array = new Conta[10]; array[0] = new Conta();

switch case da para usar varios cases em 1 coisa só. exemplo:
	case 1:
	case 2:
	case 3: faz algo; break; --> os cases 1, 2 e 3 vão rodar a mesma coisa

System.out.println(" ");  ou  System.out.print(" "); para nao pular linha depois do print
criaÃ§Ã£o de classe: "public class Nome{...}"
criaÃ§Ã£o de objeto: "Nome x = new Nome();"
criaÃ§Ã£o de objeto dentro de objeto: "x.atributo = new Nome2();"
usar referencia com "this." quando for criar uma funÃ§Ã£o de classe

pode ser usado em variavel, metodos e classes:
public --> todos conseguem acessar
private --> apenas a classe acessa
default --> apenas as pessoas do package onde esta acessam
protected --> apenas a propria classe e as classes de herança podem usar

para alterar classe "setAtributo"
para pegar o valor  "getAtributo"

Construtor:
	logo que a classe Ã© formada vai ser rodado o mÃ©todo do contrutor que tem o proprio nome
	da classe e estÃ¡ dentro dela. Normalmente Ã© para setar os valores da sua classe. Declarar
	uma outra classe como atributo, criar o "new" dela dentro do contrutor.

criando uma variavel "static", ela Ã© uma variavel "global dentro da classe", para criar coloca
	"private static int nome".
	para pegar o valor dessa variavel static criada, crie uma funÃ§Ã£o no objeto que tambem
		seja static e que retorne o valor da variavel, para quando for pegar o 
		valor dela na main, poder usar "Classe.nomeMetodoStatic = ..." 
		em vez de chamar por um dos objetos da classe (c1.nomeMe...).

Herança:
	public class Gerente extends Funcionario {
	o construtor da superclasse é sempre executado para as subclasses
	se quiser adicionar um construtor nas subclasses, passar todos os parametros do conrutor
		da superclasse, e usar a função "super" passando esses parametros

Polimorfismo: 
	pode sobrescrever metodos, e se nao quiser que uma subclasse sobrescreva um metodo
	ou um atributo da super classe, usar "final". (@Overload(na propria classe com assinatura
	diferente), @Override(em outra classe com mesmas assinaturas))

classe abstrata: (public abstract class Classe)
	é uma classe que não pode ser instanciada(new ClaseAbstrata), só pode ser criada se ouver 
	uma classe filha para ela. é possivel fazer metodos abstratos, mas a classe filha tem que 
	criar esse metodo para a propria classe filha não ser uma classe abstrata, mas apenas se o
	metodo criado for abstrato.

Interface:
	usar a palavra "interface", exepmlo: "public interface Interface", para implementar uma
	interface "public class Classe implements Interface. Todos os metodos na interface tem de
	ser public e abstract(se você não especificar nada, ele ja é public e abstract). Uma classe
	pode ter diversas interfaces e só uma herança "public implements Interface1, Interface2".
	da para chamar um objeto que tem uma interface como parametro de um metodo:
	public boolean metodo( IInterface objeto ){}